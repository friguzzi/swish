<div class="notebook">

<div class="nb-cell markdown" name="md1">
# Coin tosses

Consider a process where you repeatedly toss coins and record the results.

At each turn, you toss a coin with probability 0.8 and do nothing with probability 0.2.  The coin is fair.

You stop the process at the first time you do not toss a coin.

Write a predicate tosses(Coin,L) that, given an initial coin id =Coin=, returns in =L= the list of results of coin tosses obtained using the process above. 

Moreover, write a predicate length_tosses(N) that returns the number of coin tosses.



Compute the probability of the sequence =|[h,h,h]|= using MCINTYRE.

Compute the probability of the sequence =|[h,h,h,h,h]|= given that the subsequence =|[h,h,h]|= was observed using rejection sampling and Metropolis Hastings.

Compute the probability of the sequences of 10 coin tosses using MCINTYRE.

Compute the expected length of the sequences of coin tosses using MCINTYRE.
</div>

<div class="nb-cell program" name="p1">
:- use_module(library(mcintyre)).

:- if(current_predicate(use_rendering/1)).
:- use_rendering(c3).
:- use_rendering(graphviz).
:- endif.

:- mc.

:- begin_lpad.

% Note: one have to identify each toss with an id.
toss(_):0.8.
toss(C,h):1/2 ; toss(C,t):1/2 :- toss(C).

tosses(Coin,[]):-  % base case of the recursion
  \+ toss(Coin). 

tosses(Coin,[C|L]) :-
  toss(Coin,C),
  Coin2 is Coin + 1,
  tosses(Coin2,L).  


% this is needed because the probability of [h,h,h,h,h] 
% give that [h,h,h] was sampled is 0 because when you obtain
% the first sequence, toss(3) is false
partial_tosses(L):-
  tosses(0,T),
  append(L,_,T).


% length of the coin toss session
length_tosses(N) :-
  tosses(0,L),
  length(L,N).

:- end_lpad.

</div>

<div class="nb-cell markdown" name="md2">
Compute the probability of the sequence [h,h,h] using MCINTYRE.
</div>

<div class="nb-cell query" name="q1">
mc_sample(tosses(0,[h,h,h]),1000,P).
</div>

<div class="nb-cell markdown" name="md3">
Compute the probability of the sequence [h,h,h,h,h] given that the 
subsequence [h,h,h] was observed using rejection sampling and 
Metropolis Hastings.
</div>

<div class="nb-cell query" name="q2">
mc_rejection_sample(tosses(0,[h,h,h,h,h]),partial_tosses([h,h,h]),1000,P).
</div>

<div class="nb-cell query" name="q3">
mc_mh_sample(tosses(0,[h,h,h,h,h]),partial_tosses([h,h,h]),1000,P).
</div>

<div class="nb-cell markdown" name="md4">
Compute the probability of the sequences of 10 coin tosses 
using MCINTYRE.
</div>

<div class="nb-cell query" name="q4">
mc_sample(length_tosses(10),1000,P).
</div>

<div class="nb-cell markdown" name="md5">
Compute the expected length of the sequences of coin tosses 
using MCINTYRE.
</div>

<div class="nb-cell query" name="q5">
mc_expectation(length_tosses(N),1000,N,V).
</div>

<div class="nb-cell markdown" name="md6">
Other query:
What are the probabilities for lengths 1..20?
</div>

<div class="nb-cell query" name="q6">
findall([N,P], (between(1,20,N), mc_sample(length_tosses(N),1000,P)),Res).
</div>

</div>
